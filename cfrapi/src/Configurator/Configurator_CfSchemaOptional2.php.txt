<?php

namespace Drupal\cfrapi\Configurator;

use Donquixote\Cf\Emptyness\EmptynessInterface;
use Donquixote\Cf\Evaluator\Partial\EvaluatorPartialInterface;
use Donquixote\Cf\Form\D7\Partial\PartialD7FormatorInterface;
use Donquixote\Cf\Schema\CfSchemaInterface;
use Donquixote\Cf\Schema\Optional\CfSchema_Optional_Null;
use Donquixote\Cf\SchemaToAnything\SchemaToAnythingInterface;
use Donquixote\Cf\Summarizer\Partial\PartialSummarizerInterface;
use Drupal\cfrapi\CfrCodegenHelper\CfrCodegenHelperInterface;
use Drupal\cfrapi\Configurator\Optional\OptionalConfiguratorInterface;
use Drupal\cfrapi\SummaryBuilder\SummaryBuilderInterface;

class Configurator_CfSchemaOptional2 implements OptionalConfiguratorInterface {

  /**
   * @param \Donquixote\Cf\Schema\CfSchemaInterface $schema
   * @param \Donquixote\Cf\SchemaToAnything\SchemaToAnythingInterface $sta
   *
   * @return \Drupal\cfrapi\Configurator\Optional\OptionalConfiguratorInterface|null
   */
  public static function create(CfSchemaInterface $schema, SchemaToAnythingInterface $sta) {

    // @todo This is stupid.
    $optionalSchema = new CfSchema_Optional_Null($schema);

    $emptyness = $sta->schema($schema, EmptynessInterface::class);

    if (NULL === $emptyness) {
      $emptyness = $sta->schema($optionalSchema, EmptynessInterface::class);

      if (NULL === $emptyness) {
        return NULL;
      }
    }

    if (!$emptyness instanceof EmptynessInterface) {
      kdpm($emptyness, "Unexpected value for emptyness.");
      return NULL;
    }

    $formator = $sta->schema($optionalSchema,  PartialD7FormatorInterface::class);
    $summarizer = $sta->schema($optionalSchema,  PartialSummarizerInterface::class);
    $evaluator = $sta->schema($optionalSchema,  EvaluatorPartialInterface::class);

    return new self($formator, $summarizer, $evaluator);
  }

  public function __construct() {
  }

  /**
   * @param mixed $conf
   *   Configuration from a form, config file or storage.
   * @param string|null $label
   *   Label for the form element, specifying the purpose where it is used.
   *
   * @return array
   */
  public function confGetForm($conf, $label) {
    return $this->formHelper->schemaConfGetD7Form($this->schema, $conf, $label);
  }

  /**
   * @param mixed $conf
   *   Configuration from a form, config file or storage.
   * @param \Drupal\cfrapi\SummaryBuilder\SummaryBuilderInterface $summaryBuilder
   *   An object that controls the format of the summary.
   *
   * @return mixed|string|null
   *   A string summary is always allowed. But other values may be returned if
   *   $summaryBuilder generates them.
   */
  public function confGetSummary($conf, SummaryBuilderInterface $summaryBuilder) {
    return $this->summaryHelper->schemaConfGetSummary($this->schema, $conf);
  }

  /**
   * @param mixed $conf
   *   Configuration from a form, config file or storage.
   *
   * @return mixed
   *   Value to be used in the application.
   *
   * @throws \Drupal\cfrapi\Exception\ConfToValueException
   */
  public function confGetValue($conf) {
    return $this->valueHelper->schemaConfGetValue($this->schema, $conf);
  }

  /**
   * @param mixed $conf
   *   Configuration from a form, config file or storage.
   * @param \Drupal\cfrapi\CfrCodegenHelper\CfrCodegenHelperInterface $helper
   *
   * @return string
   *   PHP statement to generate the value.
   */
  public function confGetPhp($conf, CfrCodegenHelperInterface $helper) {
    return $this->phpHelper->schemaConfGetPhp($this->schema, $conf);
  }

  /**
   * @return \Drupal\cfrapi\ConfEmptyness\ConfEmptynessInterface|null
   *   An emptyness object, or
   *   NULL, if the configurator is in fact required and thus no valid conf
   *   counts as empty.
   */
  public function getEmptyness() {
    return $this->emptyness;
  }
}

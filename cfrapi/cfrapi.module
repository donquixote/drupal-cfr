<?php

use Drupal\cfrapi\ConfToForm\ConfToFormInterface;
use Drupal\Core\Form\FormStateInterface;

require_once __DIR__ . '/cfrapi.element.cf_schema.inc';

/**
 * Implements hook_element_info().
 */
function cfrapi_element_info() {
  return [
    'cfrapi' => [
      '#input' => TRUE,
      '#tree' => TRUE,
      /* @see _cfrapi_element_process() */
      '#process' => ['_cfrapi_element_process'],
      '#cfrapi_confToForm' => NULL,
    ],
    'cfrapi_cf_schema' => [
      '#input' => TRUE,
      '#tree' => TRUE,
      /* @see _cfrapi_cf_schema_element_process() */
      '#process' => ['_cfrapi_cf_schema_element_process'],
      /* @see _cfrapi_cf_schema_element_value() */
      '#value_callback' => '_cfrapi_cf_schema_element_value',
      // This needs to be set.
      '#cf_schema' => NULL,
      '#title' => NULL,
    ],
    'cfrapi_id_conf' => [
      /* @see _cfrapi_id_conf_element_process() */
      '#process' => ['_cfrapi_id_conf_element_process'],
      '#theme_wrappers' => ['themekit_container'],
      '#cfrapi_confToForm' => NULL,
    ],
  ];
}

/**
 * @param array $element
 * @param array $form_state
 *
 * @return array
 */
function _cfrapi_element_process(
  array $element,
  /** @noinspection PhpUnusedParameterInspection */ array &$form_state
) {

  $confToForm = $element['#cfrapi_confToForm'];
  if (!$confToForm instanceof ConfToFormInterface) {
    return [
      '#markup' => '<!-- Invalid form setup. -->',
    ];
  }
  $conf = isset($element['#value']) ? $element['#value'] : NULL;
  $label = isset($element['#title']) ? $element['#title'] : NULL;
  $element['cfrapi'] = $confToForm->confGetForm($conf, $label);
  $element['cfrapi']['#parents'] = $element['#parents'];
  unset($element['#cfrapi_confToForm']);
  return $element;
}

/**
 * @param array $form
 * @param \Drupal\Core\Form\FormStateInterface $form_state
 *
 * @return array
 *
 * @see \Drupal\cfrapi\Util\FormUtil::elementsBuildDependency()
 */
function _cfrapi_depended_element_ajax_callback(
  /** @noinspection PhpUnusedParameterInspection */ array $form,
  FormStateInterface $form_state
) {
  return $form_state->getTriggeringElement()['#depending_element_reference'];
}

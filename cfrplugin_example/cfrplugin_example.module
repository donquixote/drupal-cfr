<?php
use Drupal\cfrapi\Context\CfrContext;
use Drupal\cfrplugin\DIC\CfrPluginRealmContainer;
use Drupal\renderkit\EntityDisplay\EntityDisplayInterface;

/**
 * Implements hook_menu()
 */
function cfrplugin_example_menu() {
  return [
    'cfrplugin-example-form' => [
      '#title' => 'Entdisp example form',
      'page callback' => 'drupal_get_form',
      /* @see cfrplugin_example_form() */
      'page arguments' => ['cfrplugin_example_form'],
      'access arguments' => ['administer site configuration'],
      'type' => MENU_CALLBACK,
    ],
    'node/%node/cfrplugin-example' => [
      'page callback' => 'drupal_get_form',
      'title' => 'Entdisp example',
      /* @see cfrplugin_example_form() */
      'page arguments' => ['cfrplugin_example_node_demo_form', 1],
      'access arguments' => ['administer site configuration'],
      'type' => MENU_LOCAL_TASK,
    ],
  ];
}

/**
 * @param array $form
 * @param array $form_state
 *
 * @return array
 */
function cfrplugin_example_form(array $form, array $form_state) {

  $container = CfrPluginRealmContainer::createWithoutCache();
  if (FALSE) unset($container);

  $context = etcfrcontext()->etGetContext('node');
  # $legend = $container->interfaceToLegend->typeGetLegend(EntityDisplayInterface::class, $context);
  # $configuratorMap = $container->interfaceToCfrmap->typeGetCfrmap(EntityDisplayInterface::class, $context);
  # dpm($legend->getSelectOptions());
  # \Drupal\krumong\dpm($configuratorMap);


  if (isset($_GET['plugin'])) {
    $settings = $_GET['plugin'];
  }
  else {
    $settings = [];
  }

  # $defmap = $container->typeToDefmap->typeGetDefmap(EntityDisplayInterface::class);
  # dpm($defmap->getDefinitionsById(), 'DEFINITIONS');
  # dpm($container->typeToDefmap->typeGetDefmap(EntityImageInterface::class)->getDefinitionsById());
  # $cfrLegend = $container->typeToCfrLegend->typeGetCfrLegend(EntityDisplayInterface::class, $context);

  $form['plugin'] = [
    '#type' => 'cfrplugin',
    '#cfrplugin_interface' => EntityDisplayInterface::class,
    '#title' => t('Entity display'),
    '#default_value' => $settings,
    '#cfrplugin_context' => $context,
  ];

  $form['agree'] = [
    '#type' => 'checkbox',
    '#title' => t('Agree'),
    '#required' => TRUE,
  ];

  $form['actions']['#type'] = 'actions';
  $form['actions']['submit'] = [
    '#type' => 'submit',
    '#value' => t('Show'),
  ];

  return $form;
}

/**
 * @param array $form
 * @param array $form_state
 * @param object $node
 *
 * @return array
 */
function cfrplugin_example_node_demo_form(array $form, array $form_state, $node) {

  $settings = isset($_GET['plugin'])
    ? $_GET['plugin']
    : [];

  $context = new CfrContext();
  $context->paramNameSetValue('entityType', 'node');
  $context->paramNameSetValue('entity_type', 'node');
  $context->paramNameSetValue('bundleName', $node->type);
  $context->paramNameSetValue('bundle_name', $node->type);
  $configurator = cfrplugin()->interfaceGetConfigurator(EntityDisplayInterface::class, $context);

  $form['plugin'] = [
    '#type' => 'cfrplugin',
    '#cfrplugin_interface' => EntityDisplayInterface::class,
    '#cfrplugin_context' => $context,
    '#title' => t('Entity display'),
    '#default_value' => $settings,
  ];

  $form['actions']['#type'] = 'actions';
  $form['actions']['submit'] = [
    '#type' => 'submit',
    '#value' => t('Show'),
  ];

  if (!$settings) {
    return $form;
  }

  try {
    $entityDisplayCandidate = $configurator->confGetValue($settings);
  }
  catch (\Exception $e) {
    drupal_set_message(t('The configuration seems to be invalid.'), 'warning');
    return $form;
  }


  if ($entityDisplayCandidate instanceof EntityDisplayInterface) {
    $form['demo'] = [
      '#type' => 'fieldset',
      '#title' => t('Node displayed with this display plugin.'),
      'content' => $entityDisplayCandidate->buildEntity('node', $node),
    ];
  }

  return $form;
}

/**
 * @param array $form
 * @param array $form_state
 */
function cfrplugin_example_node_demo_form_submit(
  /** @noinspection PhpUnusedParameterInspection */ array &$form,
  array &$form_state
) {
  $options['query']['plugin'] = $form_state['values']['plugin'];
  drupal_goto($_GET['q'], $options);
}
